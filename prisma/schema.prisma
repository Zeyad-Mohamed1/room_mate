generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String         @id @default(uuid())
  name              String
  email             String         @unique
  password          String
  phone             String?
  smoker            Boolean        @default(false)
  age               String?
  gender            String?
  nationality       String?
  occupation        String?
  isAdmin           Boolean        @default(false)
  isVerified        Boolean        @default(false)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  notifications     Notification[] @relation("UserNotifications")
  sentNotifications Notification[] @relation("AdminNotifications")
  properties        Property[]
  favorites         Property[]     @relation("UserFavorites")
  offers            Offer[]
  bookings          Booking[]
  ratings           Rating[]
  verifications     Verification[]
}

model Notification {
  id        String   @id @default(uuid())
  title     String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation to the user receiving the notification
  userId String
  user   User   @relation("UserNotifications", fields: [userId], references: [id])

  // Relation to the admin sending the notification
  adminId String
  admin   User   @relation("AdminNotifications", fields: [adminId], references: [id])
}

model Category {
  id         String     @id @default(uuid())
  name       String     @unique
  icon       String?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  properties Property[]
}

model Property {
  id                              String       @id @default(uuid())
  title                           String?
  slug                            String?      @unique
  images                          String[]     @default([])
  video                           String?
  city                            String?
  country                         String?
  address                         String?
  description                     String?
  latitude                        String?
  longitude                       String?
  type                            PropertyType @default(house)
  roomType                        RoomType     @default(single)
  genderRequired                  String?
  totalRooms                      String?
  availableRooms                  String?
  roomsToComplete                 String?
  price                           String?
  size                            String?
  floor                           String?
  bathrooms                       String?
  separatedBathroom               Boolean      @default(false)
  residentsCount                  String?
  availablePersons                String?
  rentTime                        RentTime     @default(monthly)
  paymentTime                     PaymentTime  @default(monthly)
  priceIncludeWaterAndElectricity Boolean      @default(false)
  allowSmoking                    Boolean      @default(false)
  includeFurniture                Boolean      @default(false)
  airConditioning                 Boolean      @default(false)
  includeWaterHeater              Boolean      @default(false)
  parking                         Boolean      @default(false)
  internet                        Boolean      @default(false)
  nearToMetro                     Boolean      @default(false)
  nearToMarket                    Boolean      @default(false)
  elevator                        Boolean      @default(false)
  trialPeriod                     Boolean      @default(false)
  goodForForeigners               Boolean      @default(false)
  rating                          Float        @default(0)
  totalRatings                    Int          @default(0)
  isHidden                        Boolean      @default(false)
  haveProperty                    Boolean      @default(false)
  offers                          Offer[]
  bookings                        Booking[]
  ratings                         Rating[]
  termsAndConditions              String?
  isVerified                      Boolean      @default(false)
  createdAt                       DateTime     @default(now())
  updatedAt                       DateTime     @updatedAt

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  ownerId String
  owner   User   @relation(fields: [ownerId], references: [id])

  favorites     User[]         @relation("UserFavorites")
  verifications Verification[]
}

model Offer {
  id        String      @id @default(uuid())
  message   String
  price     String
  phone     String
  duration  String?
  deposit   Boolean     @default(false)
  status    OfferStatus @default(pending)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  propertyId String
  property   Property @relation(fields: [propertyId], references: [id])

  userId String
  user   User   @relation(fields: [userId], references: [id])

  booking Booking?
}

// New Booking model to track confirmed bookings
model Booking {
  id          String        @id @default(uuid())
  startDate   DateTime
  endDate     DateTime?
  totalAmount String
  status      BookingStatus @default(confirmed)
  depositPaid Boolean       @default(false)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id])

  propertyId String
  property   Property @relation(fields: [propertyId], references: [id])

  offerId String @unique
  offer   Offer  @relation(fields: [offerId], references: [id])

  rating Rating?
}

// New Rating model to track property ratings
model Rating {
  id        String   @id @default(uuid())
  score     Float
  comment   String?
  createdAt DateTime @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id])

  propertyId String
  property   Property @relation(fields: [propertyId], references: [id])

  bookingId String  @unique
  booking   Booking @relation(fields: [bookingId], references: [id])
}

model Verification {
  id        String             @id @default(uuid())
  status    VerificationStatus @default(pending)
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt

  userId String?
  user   User?   @relation(fields: [userId], references: [id])

  propertyId String?
  property   Property? @relation(fields: [propertyId], references: [id])
}

enum VerificationStatus {
  pending
  approved
  rejected
}

// Enums for Property model
enum PropertyType {
  house
  room
}

enum RoomType {
  mixed
  single
}

enum RentTime {
  daily
  weekly
  monthly
  quarterly
  semiannual
  annually
}

enum PaymentTime {
  daily
  weekly
  monthly
  quarterly
  semiannual
  annually
}

// Enums for Offer and Booking models
enum OfferStatus {
  pending
  accepted
  rejected
  cancelled
}

enum BookingStatus {
  confirmed
  cancelled
  completed
}
